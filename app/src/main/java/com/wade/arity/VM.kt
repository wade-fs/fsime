// This file is automatically generated by the build.py script. Do not edit!
/*
 * Copyright (C) 2008-2009 Mihai Preda.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.wade.arity

internal object VM {
    const val RESERVED: Byte = 0
    const val CONST: Byte = 1
    const val CALL: Byte = 2
    const val ADD: Byte = 3
    const val SUB: Byte = 4
    const val MUL: Byte = 5
    const val DIV: Byte = 6
    const val MOD: Byte = 7
    const val RND: Byte = 8
    const val UMIN: Byte = 9
    const val POWER: Byte = 10
    const val FACT: Byte = 11
    const val PERCENT: Byte = 12
    const val SQRT: Byte = 13
    const val CBRT: Byte = 14
    const val EXP: Byte = 15
    const val LN: Byte = 16
    const val SIN: Byte = 17
    const val COS: Byte = 18
    const val TAN: Byte = 19
    const val SEC: Byte = 20
    const val CSC: Byte = 21
    const val COT: Byte = 22
    const val ASIN: Byte = 23
    const val ACOS: Byte = 24
    const val ATAN: Byte = 25
    const val ASEC: Byte = 26
    const val ACSC: Byte = 27
    const val ACOT: Byte = 28
    const val SINH: Byte = 29
    const val COSH: Byte = 30
    const val TANH: Byte = 31
    const val SECH: Byte = 32
    const val CSCH: Byte = 33
    const val COTH: Byte = 34
    const val ASINH: Byte = 35
    const val ACOSH: Byte = 36
    const val ATANH: Byte = 37
    const val ASECH: Byte = 38
    const val ACSCH: Byte = 39
    const val ACOTH: Byte = 40
    const val ABS: Byte = 41
    const val FLOOR: Byte = 42
    const val CEIL: Byte = 43
    const val SIGN: Byte = 44
    const val MIN: Byte = 45
    const val MAX: Byte = 46
    const val GCD: Byte = 47
    const val COMB: Byte = 48
    const val PERM: Byte = 49
    const val LOAD0: Byte = 50
    const val LOAD1: Byte = 51
    const val LOAD2: Byte = 52
    const val LOAD3: Byte = 53
    const val LOAD4: Byte = 54
    const val REAL: Byte = 55
    const val IMAG: Byte = 56
    @JvmField
    val opcodeName = arrayOf(
        "reserved",
        "const",
        "call",
        "add",
        "sub",
        "mul",
        "div",
        "mod",
        "rnd",
        "umin",
        "power",
        "fact",
        "percent",
        "sqrt",
        "cbrt",
        "exp",
        "ln",
        "sin",
        "cos",
        "tan",
        "sec",
        "csc",
        "cot",
        "asin",
        "acos",
        "atan",
        "asec",
        "acsc",
        "acot",
        "sinh",
        "cosh",
        "tanh",
        "sech",
        "csch",
        "coth",
        "asinh",
        "acosh",
        "atanh",
        "asech",
        "acsch",
        "acoth",
        "abs",
        "floor",
        "ceil",
        "sign",
        "min",
        "max",
        "gcd",
        "comb",
        "perm",
        "load0",
        "load1",
        "load2",
        "load3",
        "load4",
        "real",
        "imag"
    )
    @JvmField
    val arity = byteArrayOf(
        0,
        0,
        -1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        1,
        1
    )
    @JvmField
    val builtins = byteArrayOf(
        RND,
        SQRT,
        CBRT,
        SIN,
        COS,
        TAN,
        SEC,
        CSC,
        COT,
        ASIN,
        ACOS,
        ATAN,
        ASEC,
        ACSC,
        ACOT,
        SINH,
        COSH,
        TANH,
        SECH,
        CSCH,
        COTH,
        ASINH,
        ACOSH,
        ATANH,
        ASECH,
        ACSCH,
        ACOTH,
        EXP,
        LN,
        ABS,
        FLOOR,
        CEIL,
        SIGN,
        MIN,
        MAX,
        GCD,
        COMB,
        PERM,
        MOD,
        REAL,
        IMAG
    )
}